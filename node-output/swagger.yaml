openapi: 3.0.0
info:
  title: Random User API
  description: API to manage random users
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
paths:
  /users/random:
    get:
      summary: Get a random user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  gender:
                    type: string
                  name:
                    type: string
                  contact:
                    type: string
                  address:
                    type: string
                  photoUrl:
                    type: string
    /users/all:
      get:
        summary: Get all users
        parameters:
          - name: limit
            in: query
            description: Limit number of users returned
            schema:
              type: integer
            example: 10
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      gender:
                        type: string
                      name:
                        type: string
                      contact:
                        type: string
                      address:
                        type: string
                      photoUrl:
                        type: string
    /users/save:
      post:
        summary: Save a new user
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  gender:
                    type: string
                  name:
                    type: string
                  contact:
                    type: string
                  address:
                    type: string
                  photoUrl:
                    type: string
                required:
                  - name
                  - contact
                  - address
                example:
                  name: John Smith
                  contact: 123-456-7890
                  address: 123 Main St
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                    gender:
                      type: string
                    name:
                      type: string
                    contact:
                      type: string
                    address:
                      type: string
                    photoUrl:
                      type: string
    /users/update/{id}:
      patch:
        summary: Update a user by ID
        parameters:
          - name: id
            in: path
            description: ID of the user to update
            schema:
              type: string
            example: 60e28ed14e50c721acf74e31
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  gender:
                    type: string
                  name:
                    type: string
                  contact:
                    type: string
                  address:
                    type: string
                  photoUrl:
                    type: string
                example:
                  name: John Doe
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                    gender:
                      type: string
                    name:
                      type: string
                    contact:
                      type: string
                    address:
                      type: string
                    photoUrl:
                      type: string
    /users/bulk-update:
      patch:
        summary: Update multiple users
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items:
                      type: string
                  update:
                    type: object
                    description: Properties to update for each user
                    required: true
              description: Object containing an array of user IDs to be updated and an object of properties to update for each user
              example:
                ids: ["60e28ed14e50c721acf74e31", "60e28ed14e50c721acf74e32"]
                update: { "name": "John Doe" }
        responses:
          '200':
            description: Updated users
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    n:
                      type: integer
                      description: Number of users updated
                    nModified:
                      type: integer
                      description: Number of users modified
                    ok:
                      type: integer
                      description: Status code of the update operation
                    updatedUsers:
                      type: array
                      description: Array of updated users
                      items:
                        
          '400':
            description: Invalid request body
          '404':
            description: Users not found or invalid IDs provided
          '500':
            description: Internal server error

    /users/{id}:
        delete:
          summary: Delete a user by ID
          parameters:
            - name: id
              in: path
              description: ID of the user to delete
              required: true
              schema:
                type: string
          responses:
            200:
              description: User deleted successfully
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: ID of the deleted user
            404:
              description: User not found
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Error message indicating user not found
